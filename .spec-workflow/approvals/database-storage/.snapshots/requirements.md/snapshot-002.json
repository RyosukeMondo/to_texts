{
  "id": "snapshot_1760712596433_2mycqf667",
  "approvalId": "approval_1760712334426_igirz0qou",
  "approvalTitle": "Requirements: Database Storage Feature",
  "version": 2,
  "timestamp": "2025-10-17T14:49:56.433Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Requirements Document\n\n## Introduction\n\nThe database storage feature enables zlibrary-downloader to maintain a local SQLite database of Z-Library book metadata. This feature transforms the tool from a simple search-and-download utility into a personal library management system. Users can build searchable catalogs of books, create reading lists, track downloads, and browse their collections offline.\n\n**Purpose**: Store and manage Z-Library book metadata locally to enable offline browsing, collection management, and download tracking.\n\n**Value to Users**:\n- Build a searchable catalog of discovered books without re-querying Z-Library\n- Work offline by browsing previously discovered books\n- Organize books into custom reading lists\n- Track download history and file locations\n- Search and filter personal book collections\n- Export and backup book metadata\n\n## Alignment with Product Vision\n\nThis feature supports the zlibrary-downloader project goals by:\n- **Enhanced User Experience**: Moving beyond one-time searches to persistent knowledge management\n- **Offline Capability**: Enabling users to work without constant internet connectivity\n- **Data Ownership**: Giving users full control over their book metadata\n- **Workflow Integration**: Supporting researcher and collector workflows with lists and tags\n- **Quality Standards**: Maintaining strict code quality gates (≤400 lines/file, ≤30 lines/function, ≤10 complexity, ≥80% coverage)\n\n## Requirements\n\n### Requirement 1: Store Search Results\n\n**User Story:** As a book collector, I want search results automatically saved to a local database, so that I can browse and search them later without re-querying Z-Library.\n\n#### Acceptance Criteria\n\n1. WHEN user runs search command with `--save-db` flag THEN system SHALL store all returned book metadata in local SQLite database\n2. WHEN book with same Z-Library ID already exists in database THEN system SHALL update existing record instead of creating duplicate\n3. WHEN storing book metadata THEN system SHALL capture all available fields: id, hash, title, author, year, publisher, language, extension, size, cover_url, description\n4. WHEN search completes with database storage THEN system SHALL record search query in search_history table with timestamp\n5. IF database file does not exist THEN system SHALL create it with complete schema before storing results\n6. WHEN storing books THEN system SHALL extract and normalize author names into separate authors table with many-to-many relationships\n\n### Requirement 2: Browse Local Database\n\n**User Story:** As a researcher, I want to browse and search my local book database, so that I can find books I've previously discovered without internet access.\n\n#### Acceptance Criteria\n\n1. WHEN user runs `db browse` command THEN system SHALL display paginated list of books from local database\n2. WHEN user provides `--language` filter THEN system SHALL return only books matching specified language\n3. WHEN user provides `--year-from` and `--year-to` filters THEN system SHALL return only books published within specified year range\n4. WHEN user provides `--format` filter THEN system SHALL return only books with specified file extension\n5. WHEN user provides `--author` filter THEN system SHALL return only books by authors matching specified name (case-insensitive substring match)\n6. WHEN user provides `--query` parameter THEN system SHALL perform full-text search across title, author, and description fields\n7. WHEN browse results exceed page size THEN system SHALL display first page with navigation instructions\n8. IF database is empty THEN system SHALL display helpful message suggesting user run search with `--save-db`\n9. WHEN displaying book list THEN system SHALL format output consistently with online search results for familiarity\n\n### Requirement 3: View Book Details\n\n**User Story:** As a book collector, I want to view complete metadata for a specific book, so that I can make informed decisions about downloading.\n\n#### Acceptance Criteria\n\n1. WHEN user runs `db show <book-id>` command THEN system SHALL display all stored metadata for specified book\n2. WHEN displaying book details THEN system SHALL include: title, author(s), year, publisher, language, format, size, description, ISBN, cover URL\n3. WHEN displaying book details THEN system SHALL show download status (downloaded/not downloaded) and file path if downloaded\n4. WHEN displaying book details THEN system SHALL show which reading lists contain the book\n5. WHEN displaying book details THEN system SHALL show saved book notes and tags if book is saved\n6. IF book ID does not exist THEN system SHALL display error message with suggestion to search database\n\n### Requirement 4: Save Books for Later\n\n**User Story:** As a book collector, I want to bookmark/save interesting books with notes, so that I can download them later when I have time.\n\n#### Acceptance Criteria\n\n1. WHEN user runs `db save <book-id>` command THEN system SHALL add book to saved_books table with current timestamp\n2. WHEN user provides `--notes` parameter THEN system SHALL store provided text in notes field\n3. WHEN user provides `--tags` parameter THEN system SHALL store comma-separated tags in tags field\n4. WHEN user provides `--priority` parameter (0-5) THEN system SHALL store priority value\n5. WHEN user runs `db saved` command THEN system SHALL display all saved books ordered by saved_at timestamp descending\n6. WHEN user runs `db unsave <book-id>` command THEN system SHALL remove book from saved_books table\n7. IF attempting to save already-saved book THEN system SHALL update existing saved record instead of creating duplicate\n8. WHEN displaying saved books THEN system SHALL include notes, tags, and priority in output\n\n### Requirement 5: Manage Reading Lists\n\n**User Story:** As a researcher, I want to create custom reading lists with my books, so that I can organize books by topic or project.\n\n#### Acceptance Criteria\n\n1. WHEN user runs `db list-create <name>` command THEN system SHALL create new reading list with unique name\n2. WHEN user provides `--description` parameter THEN system SHALL store description with reading list\n3. WHEN user runs `db lists` command THEN system SHALL display all reading lists with book counts\n4. WHEN user runs `db list-show <name>` command THEN system SHALL display all books in specified list with their positions\n5. WHEN user runs `db list-add <name> --book-id <id>` command THEN system SHALL add book to specified list\n6. WHEN adding book to list THEN system SHALL assign next available position number for ordering\n7. WHEN user runs `db list-remove <name> --book-id <id>` command THEN system SHALL remove book from specified list\n8. WHEN user runs `db list-delete <name>` command THEN system SHALL delete reading list and all its book associations\n9. IF list name already exists THEN system SHALL display error message when creating\n10. IF list name does not exist THEN system SHALL display error message with available list names\n11. IF book does not exist in database THEN system SHALL display error message when adding to list\n\n### Requirement 6: Track Downloads\n\n**User Story:** As an archivist, I want download history automatically tracked with file locations, so that I can avoid duplicate downloads and locate files easily.\n\n#### Acceptance Criteria\n\n1. WHEN user downloads book using existing download command THEN system SHALL automatically record download in downloads table\n2. WHEN recording download THEN system SHALL capture: book_id, credential_id, filename, file_path, downloaded_at timestamp, file_size\n3. WHEN user runs `db downloads` command THEN system SHALL display download history ordered by downloaded_at descending\n4. WHEN user provides `--recent` flag THEN system SHALL limit results to downloads from last 7 days\n5. WHEN user provides `--credential <id>` filter THEN system SHALL show only downloads made with specified credential\n6. WHEN displaying downloads THEN system SHALL show book title, file path, download date, and file size\n7. WHEN file at recorded path no longer exists THEN system SHALL indicate \"File Missing\" in status column\n8. WHEN download fails THEN system SHALL record failure with status='failed' and error message\n\n### Requirement 7: Search History\n\n**User Story:** As a researcher, I want to view my search history, so that I can track what I've searched for and re-run previous searches.\n\n#### Acceptance Criteria\n\n1. WHEN user performs search with `--save-db` flag THEN system SHALL record search query with timestamp in search_history table\n2. WHEN recording search THEN system SHALL capture: search query, filters applied (as JSON), found_at timestamp\n3. WHEN user runs `db history` command THEN system SHALL display recent search queries ordered by timestamp descending\n4. WHEN user provides `--limit N` parameter THEN system SHALL display only most recent N searches\n5. WHEN displaying search history THEN system SHALL show query text, filters applied, and timestamp\n6. WHEN search returns results THEN system SHALL link search history record to found books for tracking\n\n### Requirement 8: Database Operations\n\n**User Story:** As a power user, I want to export, import, and manage my database, so that I can backup data and maintain database health.\n\n#### Acceptance Criteria\n\n1. WHEN user runs `db export` command THEN system SHALL export all database contents to JSON format\n2. WHEN user provides `--format csv` parameter THEN system SHALL export books table to CSV format\n3. WHEN user provides `--output <file>` parameter THEN system SHALL write export to specified file path\n4. WHEN user runs `db import <file>` command THEN system SHALL read JSON file and import all books into database\n5. WHEN importing existing books THEN system SHALL update records (upsert behavior) instead of creating duplicates\n6. WHEN user runs `db stats` command THEN system SHALL display: total books, books by language, books by format, total downloads, database file size\n7. WHEN user runs `db vacuum` command THEN system SHALL optimize database by reclaiming unused space\n8. WHEN user runs `db init` command THEN system SHALL create database with complete schema if it doesn't exist\n9. IF export file already exists THEN system SHALL prompt for confirmation before overwriting\n10. IF import file is invalid JSON THEN system SHALL display clear error message without corrupting database\n\n## Non-Functional Requirements\n\n### Code Architecture and Modularity\n\n- **Single Responsibility Principle**: Separate concerns into distinct layers (CLI, Service, Repository, Database)\n- **Repository Pattern**: Isolate all SQL queries in repository classes, never in services or CLI\n- **Service Layer**: Orchestrate operations across repositories without direct database access\n- **Modular Design**: Each module (book, author, list, download) in separate files ≤400 lines\n- **Clear Interfaces**: Define type-safe interfaces between layers using dataclasses\n- **Dependency Injection**: Pass database connection to repositories, repositories to services\n\n### Performance\n\n- Database queries SHALL complete in <100ms for typical operations (search, browse, view)\n- Database queries with 10,000 books SHALL complete in <200ms\n- Bulk insert of 100 books SHALL complete in <1 second\n- Full-text search across 10,000 books SHALL complete in <200ms\n- Database initialization SHALL complete in <500ms\n- Export of 10,000 books to JSON SHALL complete in <5 seconds\n\n### Security\n\n- Database file SHALL have restricted permissions (mode 600 on Unix systems)\n- SQL queries SHALL use parameterized statements exclusively to prevent SQL injection\n- No credentials SHALL be stored in database (only credential identifiers as foreign keys)\n- No sensitive user data SHALL be stored beyond book metadata\n- Database connection SHALL be properly closed on application exit to prevent corruption\n\n### Reliability\n\n- Database operations SHALL use transactions for multi-step operations to ensure atomicity\n- Database schema SHALL include foreign key constraints to maintain referential integrity\n- System SHALL validate data before database insertion to prevent invalid states\n- System SHALL handle database connection failures gracefully with clear error messages\n- System SHALL create automatic backups before major operations (import, vacuum)\n- System SHALL detect and recover from database corruption with user notification\n\n### Usability\n\n- Database location SHALL default to `~/.zlibrary/books.db` with option to override via environment variable\n- All database commands SHALL be grouped under `db` subcommand for discoverability\n- Error messages SHALL be clear and include actionable suggestions\n- First-time users SHALL see helpful messages explaining how to populate database\n- Command names SHALL be consistent with existing zlibrary-downloader conventions\n- Browse results SHALL display in familiar format matching online search results\n\n### Maintainability\n\n- All files SHALL be ≤400 non-empty, non-comment lines (enforced by pre-commit hook)\n- All functions SHALL be ≤30 lines excluding signature and docstring (enforced by pre-commit hook)\n- Cyclomatic complexity SHALL be ≤10 per function (enforced by radon check)\n- Test coverage SHALL be ≥80% across all database code (enforced by pytest-cov)\n- All public functions SHALL have complete type hints (enforced by mypy strict mode)\n- All public functions SHALL have Google-style docstrings with Args, Returns, Raises\n- Code SHALL pass flake8 linting with no errors\n- Code SHALL be formatted with black (100-character line length)\n\n### Compatibility\n\n- System SHALL support Python 3.8+\n- System SHALL use only Python standard library sqlite3 module (no additional dependencies)\n- System SHALL work on Windows, macOS, and Linux\n- System SHALL be backward compatible with existing CLI commands (no breaking changes)\n- System SHALL handle path separators correctly across operating systems\n- Database schema SHALL be forward-compatible with planned future features\n",
  "fileStats": {
    "size": 14020,
    "lines": 213,
    "lastModified": "2025-10-17T14:45:24.794Z"
  },
  "comments": []
}