{
  "id": "snapshot_1760537204952_hesx57q4x",
  "approvalId": "approval_1760537151427_1l5j3ubgg",
  "approvalTitle": "QA Compliance: Design Document",
  "version": 2,
  "timestamp": "2025-10-15T14:06:44.952Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nThis design implements a comprehensive Quality Assurance (QA) compliance infrastructure for the to_texts monorepo. The system establishes automated validation of code quality through pre-commit hooks, static analysis, type checking, and complexity measurement across both Rust and Python codebases.\n\nThe design follows a layered approach:\n1. **Git Hook Layer**: Pre-commit framework intercepts commits\n2. **Validation Layer**: Individual quality tools (type checkers, linters, formatters)\n3. **Configuration Layer**: Centralized tool configuration files\n4. **Reporting Layer**: Clear, actionable feedback to developers\n\nThe implementation prioritizes developer experience with fast feedback, clear error messages, and auto-fixing capabilities where possible.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\n**Quality Assurance Tooling (Section: Code Quality Tools)**\n\nThe design directly implements the quality tools specified in tech.md:\n\n**Rust:**\n- `cargo clippy`: Static analysis and linting\n- `rustfmt`: Code formatting\n- `cargo check`: Type checking and compilation\n- `cargo-complexity` or `rust-code-analysis`: Cyclomatic complexity measurement\n\n**Python:**\n- `mypy`: Static type checking\n- `black`: Code formatting (line-length: 100)\n- `flake8`: Linting and style enforcement\n- `radon`: Cyclomatic complexity measurement\n- `pytest` + `pytest-cov`: Testing and coverage\n\n**Pre-commit Framework:**\n- Git hooks using `pre-commit` framework\n- Automated validation enforcing all metrics\n\n**Alignment with Known Limitations (tech.md Section)**\n\nAddresses limitation #9: \"Type Hints Incomplete (Python)\"\n- Design includes complete type hint coverage for all Python modules\n\nAddresses limitation #10: \"Cyclomatic Complexity Violations\"\n- Design includes complexity audit and refactoring approach\n\n### Project Structure (structure.md)\n\n**Configuration Files (Section: Configuration Management)**\n\nNew configuration files will be added:\n```\nto_texts/\n├── .pre-commit-config.yaml        # Pre-commit hook configuration\n├── .flake8                         # Python linting configuration\n└── packages/\n    └── python/\n        └── zlibrary-downloader/\n            └── pyproject.toml      # Extended with mypy, black, pytest config\n```\n\n**Code Quality Integration (Section: Quality Enforcement)**\n\nImplements the pre-commit hooks structure defined in structure.md:\n- Rust checks: cargo-check, cargo-clippy, cargo-fmt, cargo-complexity\n- Python checks: mypy, flake8, black, radon-complexity\n- Code metrics: line-count-validator, function-size-validator\n\n**Code Size Guidelines (Section: Code Size Guidelines)**\n\nAutomated enforcement of:\n- Maximum 400 lines per file\n- Maximum 30 lines per function\n- Maximum cyclomatic complexity of 10\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n\n**Build System:**\n- **Cargo workspace** (`packages/rust/Cargo.toml`): Already configured for workspace-level commands\n- **pyproject.toml** (`packages/python/zlibrary-downloader/pyproject.toml`): Extend for tool configuration\n\n**Version Control:**\n- **Git repository**: Use `.git/hooks` directory for pre-commit hooks\n- **.gitignore**: Already excludes build artifacts, will work with new tooling\n\n**Documentation:**\n- **README.md files**: Extend with QA setup instructions\n- **Existing structure**: Follow established documentation patterns\n\n### Integration Points\n\n**Development Workflow:**\n- Integrate with existing `cargo build`, `cargo test` workflow\n- Integrate with existing `./scripts/run.sh` Python workflow\n- No changes to runtime behavior, only development-time validation\n\n**CI/CD (Future):**\n- Same tool configuration will be reusable in GitHub Actions\n- Tools run locally before commit = same checks in CI/CD\n\n**IDE Integration:**\n- Configuration files compatible with VS Code, PyCharm, IntelliJ Rust\n- Developers can run tools via IDE or command line\n\n## Architecture\n\n### Layered Architecture\n\n```mermaid\ngraph TD\n    Dev[Developer Commits Code] --> Git[Git Commit Hook]\n    Git --> PreCommit[Pre-commit Framework]\n    PreCommit --> RustChecks[Rust Validation]\n    PreCommit --> PythonChecks[Python Validation]\n    PreCommit --> MetricsChecks[Code Metrics Validation]\n\n    RustChecks --> CargoCheck[cargo check]\n    RustChecks --> Clippy[cargo clippy]\n    RustChecks --> Rustfmt[rustfmt --check]\n    RustChecks --> Complexity[cargo-complexity]\n\n    PythonChecks --> Mypy[mypy]\n    PythonChecks --> Flake8[flake8]\n    PythonChecks --> Black[black --check]\n    PythonChecks --> Radon[radon cc]\n\n    MetricsChecks --> LineCount[Line count validator]\n    MetricsChecks --> FuncSize[Function size validator]\n\n    CargoCheck --> Pass{All Pass?}\n    Clippy --> Pass\n    Rustfmt --> Pass\n    Complexity --> Pass\n    Mypy --> Pass\n    Flake8 --> Pass\n    Black --> Pass\n    Radon --> Pass\n    LineCount --> Pass\n    FuncSize --> Pass\n\n    Pass -->|Yes| Allow[Commit Allowed]\n    Pass -->|No| Block[Commit Blocked + Error Messages]\n```\n\n### Modular Design Principles\n\n**Single File Responsibility:**\n- Each configuration file controls one tool or tool category\n- Pre-commit config orchestrates but doesn't implement checks\n\n**Component Isolation:**\n- Each quality tool is independent\n- Tools can be enabled/disabled individually in pre-commit config\n- Failure of one tool doesn't prevent others from running (fail-fast or continue-on-error configurable)\n\n**Service Layer Separation:**\n- Git hooks (orchestration layer)\n- Validation tools (business logic layer)\n- Configuration files (data layer)\n- Error reporting (presentation layer)\n\n**Utility Modularity:**\n- Custom validators (line count, function size) as separate scripts\n- Reusable across Rust and Python with different parsers\n\n## Tool Selection and Rationale\n\n### Pre-commit Framework\n\n**Selected: `pre-commit` (https://pre-commit.com/)**\n\n**Version:** ≥3.0.0 (latest stable: 3.6.0 as of 2025)\n\n**Rationale:**\n- Language-agnostic: Works with Rust, Python, and custom scripts\n- Declarative configuration via YAML\n- Built-in caching for performance\n- Large ecosystem of pre-built hooks\n- Supports both local and remote hooks\n- Active maintenance and community support\n\n**Alternatives Considered:**\n- **husky** (JavaScript-focused, less suitable for Rust)\n- **Git hooks directly** (no caching, no framework, harder to maintain)\n- **lefthook** (Good alternative, but pre-commit has larger ecosystem)\n\n**Installation:**\n```bash\npip install pre-commit\npre-commit install\n```\n\n### Rust Quality Tools\n\n#### 1. Type Checking: `cargo check`\n\n**Version:** Built into Rust toolchain (rustc)\n\n**Rationale:**\n- Official Rust compiler type checking\n- Zero additional dependencies\n- Fastest way to verify code compiles\n- Catches type errors, borrow checker violations\n\n**Configuration:** None needed (inherits from Cargo.toml)\n\n#### 2. Linting: `cargo clippy`\n\n**Version:** Latest stable (ships with rustup)\n\n**Rationale:**\n- Official Rust linter\n- Catches common mistakes and anti-patterns\n- Suggests idiomatic Rust code\n- Configurable lint levels\n\n**Configuration:** Via `Cargo.toml` or `clippy.toml`\n```toml\n[workspace.lints.clippy]\nall = \"warn\"\npedantic = \"warn\"\nunwrap_used = \"deny\"\nexpect_used = \"deny\"\n```\n\n**Alternatives Considered:**\n- None (clippy is the standard)\n\n#### 3. Formatting: `rustfmt`\n\n**Version:** Latest stable (ships with rustup)\n\n**Rationale:**\n- Official Rust formatter\n- Enforces consistent style\n- Zero-configuration by default\n- Fast and deterministic\n\n**Configuration:** Via `rustfmt.toml` (optional, defaults are good)\n\n**Alternatives Considered:**\n- None (rustfmt is the standard)\n\n#### 4. Complexity Analysis: `rust-code-analysis`\n\n**Selected: `rust-code-analysis-cli`**\n\n**Version:** ≥0.0.25\n\n**Rationale:**\n- Purpose-built for Rust\n- Provides cyclomatic complexity (CC), cognitive complexity (CogC)\n- JSON output for parsing\n- Actively maintained by Mozilla\n\n**Installation:**\n```bash\ncargo install rust-code-analysis-cli\n```\n\n**Alternatives Considered:**\n- **cargo-complexity** (deprecated, unmaintained)\n- **scc** (good for SLOC, less detailed complexity metrics)\n\n**Usage:**\n```bash\nrust-code-analysis-cli --metrics -O json -p src/\n```\n\n### Python Quality Tools\n\n#### 1. Type Checking: `mypy`\n\n**Version:** ≥1.8.0 (latest: 1.8.x as of 2025)\n\n**Rationale:**\n- Official Python type checker\n- Strict mode for maximum type safety\n- Fast incremental checking\n- Excellent error messages\n- Active development\n\n**Configuration:** Via `pyproject.toml`\n```toml\n[tool.mypy]\npython_version = \"3.8\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ndisallow_any_unimported = true\nno_implicit_optional = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\n```\n\n**Alternatives Considered:**\n- **pyright** (faster, but less mature ecosystem)\n- **pyre** (Facebook's type checker, less widely adopted)\n\n#### 2. Linting: `flake8`\n\n**Version:** ≥7.0.0 (latest stable)\n\n**Rationale:**\n- Combines PyFlakes, pycodestyle, mccabe\n- Fast and lightweight\n- Widely adopted standard\n- Extensive plugin ecosystem\n\n**Plugins:**\n- `flake8-bugbear`: Additional bug detection\n- `flake8-comprehensions`: List/dict comprehension improvements\n- `flake8-simplify`: Code simplification suggestions\n\n**Configuration:** Via `.flake8` or `pyproject.toml` (with flake8-pyproject plugin)\n```ini\n[flake8]\nmax-line-length = 100\nmax-complexity = 10\nextend-ignore = E203, W503\nexclude = venv/, .git/, __pycache__, *.egg-info\n```\n\n**Alternatives Considered:**\n- **pylint** (slower, more opinionated, overlaps with mypy)\n- **ruff** (very fast, but newer, less stable as of 2025)\n\n#### 3. Formatting: `black`\n\n**Version:** ≥24.0.0 (latest stable)\n\n**Rationale:**\n- Opinionated formatter, no configuration debates\n- Fast and deterministic\n- Widely adopted (de facto standard)\n- Excellent git diff minimization\n\n**Configuration:** Via `pyproject.toml`\n```toml\n[tool.black]\nline-length = 100\ntarget-version = ['py38']\n```\n\n**Alternatives Considered:**\n- **autopep8** (less opinionated, more configuration needed)\n- **yapf** (more configurable, but inconsistent results)\n\n#### 4. Complexity Analysis: `radon`\n\n**Version:** ≥6.0.0\n\n**Rationale:**\n- Comprehensive metrics (CC, MI, raw metrics, Halstead)\n- JSON output for automation\n- Well-maintained\n- Easy integration with pre-commit\n\n**Installation:**\n```bash\npip install radon\n```\n\n**Usage:**\n```bash\nradon cc --min C --json zlibrary_downloader/\n```\n\n**Alternatives Considered:**\n- **mccabe** (included in flake8, but limited output options)\n- **wily** (tracks complexity over time, overkill for this use case)\n\n#### 5. Testing: `pytest` + `pytest-cov`\n\n**Version:**\n- `pytest` ≥8.0.0\n- `pytest-cov` ≥4.1.0\n\n**Rationale:**\n- Industry standard Python testing framework\n- Excellent fixture system\n- Rich plugin ecosystem\n- Coverage integration via pytest-cov\n\n**Configuration:** Via `pyproject.toml`\n```toml\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\naddopts = \"--cov=zlibrary_downloader --cov-report=term-missing --cov-report=html\"\n```\n\n**Alternatives Considered:**\n- **unittest** (stdlib, less features)\n- **nose2** (less active development)\n\n### Code Metrics Validation\n\n#### Custom Validators\n\n**1. Line Count Validator**\n\n**Implementation:** Custom Python script\n\n**Logic:**\n```python\ndef validate_line_count(file_path, max_lines=400):\n    # Count non-empty, non-comment lines\n    # Exclude test files, generated code\n    # Return (pass: bool, count: int, message: str)\n```\n\n**2. Function Size Validator**\n\n**Implementation:** Custom Python script using AST parsing\n\n**Logic:**\n```python\ndef validate_function_size(file_path, max_lines=30):\n    # Parse with ast.parse() for Python\n    # Parse with syn for Rust\n    # Count lines per function excluding signature, docstring\n    # Return violations list\n```\n\n**Rust Parsing:** Use `syn` crate or `rust-code-analysis` output\n\n**Python Parsing:** Use `ast` module from stdlib\n\n## Components and Interfaces\n\n### Component 1: Pre-commit Configuration\n\n**Purpose:** Orchestrate all quality checks in a single hook\n\n**File:** `.pre-commit-config.yaml`\n\n**Structure:**\n```yaml\nrepos:\n  - repo: local\n    hooks:\n      # Rust checks\n      - id: cargo-check\n        name: Rust type checking\n        entry: cargo check\n        language: system\n        files: \\.rs$\n        pass_filenames: false\n\n      - id: cargo-clippy\n        name: Rust linting\n        entry: cargo clippy -- -D warnings\n        language: system\n        files: \\.rs$\n        pass_filenames: false\n\n      - id: rustfmt\n        name: Rust formatting\n        entry: cargo fmt --check\n        language: system\n        files: \\.rs$\n        pass_filenames: false\n\n      - id: rust-complexity\n        name: Rust complexity check\n        entry: scripts/check_rust_complexity.sh\n        language: script\n        files: \\.rs$\n\n      # Python checks\n      - id: mypy\n        name: Python type checking\n        entry: mypy\n        language: system\n        types: [python]\n        args: [--strict]\n\n      - id: flake8\n        name: Python linting\n        entry: flake8\n        language: system\n        types: [python]\n\n      - id: black-check\n        name: Python formatting\n        entry: black --check\n        language: system\n        types: [python]\n\n      - id: radon-complexity\n        name: Python complexity check\n        entry: scripts/check_python_complexity.sh\n        language: script\n        types: [python]\n\n      # Code metrics\n      - id: line-count\n        name: Line count validation\n        entry: scripts/validate_line_count.py\n        language: script\n        files: \\.(rs|py)$\n\n      - id: function-size\n        name: Function size validation\n        entry: scripts/validate_function_size.py\n        language: script\n        files: \\.(rs|py)$\n```\n\n**Interface:**\n- Input: Modified files from git staging area\n- Output: Pass/fail + error messages\n- Exit codes: 0 (pass), non-zero (fail)\n\n### Component 2: Rust Complexity Checker\n\n**Purpose:** Validate cyclomatic complexity ≤10 for Rust code\n\n**File:** `scripts/check_rust_complexity.sh`\n\n**Implementation:**\n```bash\n#!/bin/bash\nset -e\n\n# Run rust-code-analysis on Rust packages\nrust-code-analysis-cli --metrics -O json -p packages/rust/text-extractor/src/ > /tmp/rust_metrics.json\n\n# Parse JSON and check complexity\npython3 scripts/parse_rust_complexity.py /tmp/rust_metrics.json 10\n```\n\n**Dependencies:**\n- `rust-code-analysis-cli` (installed via cargo)\n- `scripts/parse_rust_complexity.py` (custom parser)\n\n**Interface:**\n- Input: Rust source files\n- Output: List of functions exceeding complexity threshold\n- Exit code: 0 (pass), 1 (violations found)\n\n### Component 3: Python Complexity Checker\n\n**Purpose:** Validate cyclomatic complexity ≤10 for Python code\n\n**File:** `scripts/check_python_complexity.sh`\n\n**Implementation:**\n```bash\n#!/bin/bash\nset -e\n\n# Run radon on Python package\nradon cc --min C --json packages/python/zlibrary-downloader/zlibrary_downloader/ > /tmp/python_metrics.json\n\n# Parse JSON and check complexity\npython3 scripts/parse_python_complexity.py /tmp/python_metrics.json 10\n```\n\n**Dependencies:**\n- `radon` (installed via pip)\n- `scripts/parse_python_complexity.py` (custom parser)\n\n**Interface:**\n- Input: Python source files\n- Output: List of functions exceeding complexity threshold\n- Exit code: 0 (pass), 1 (violations found)\n\n### Component 4: Line Count Validator\n\n**Purpose:** Enforce 400 line limit per file\n\n**File:** `scripts/validate_line_count.py`\n\n**Implementation:**\n```python\n#!/usr/bin/env python3\nimport sys\nimport os\n\nMAX_LINES = 400\nEXCLUDE_PATTERNS = ['test_', '_test.', 'target/', 'venv/', '__pycache__']\n\ndef count_lines(file_path):\n    \"\"\"Count non-empty lines, excluding comments.\"\"\"\n    # Implementation specific to file extension\n\ndef is_excluded(file_path):\n    \"\"\"Check if file should be excluded.\"\"\"\n    return any(pattern in file_path for pattern in EXCLUDE_PATTERNS)\n\ndef main(files):\n    violations = []\n    for file_path in files:\n        if is_excluded(file_path):\n            continue\n        count = count_lines(file_path)\n        if count > MAX_LINES:\n            violations.append((file_path, count))\n\n    if violations:\n        print(\"Line count violations:\")\n        for path, count in violations:\n            print(f\"  {path}: {count} lines (max: {MAX_LINES})\")\n        sys.exit(1)\n    sys.exit(0)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n```\n\n**Interface:**\n- Input: List of file paths (from pre-commit)\n- Output: Violation report\n- Exit code: 0 (pass), 1 (violations)\n\n### Component 5: Function Size Validator\n\n**Purpose:** Enforce 30 line limit per function\n\n**File:** `scripts/validate_function_size.py`\n\n**Implementation:**\n```python\n#!/usr/bin/env python3\nimport sys\nimport ast\n\nMAX_FUNCTION_LINES = 30\n\ndef validate_python_file(file_path):\n    \"\"\"Validate Python file function sizes.\"\"\"\n    with open(file_path) as f:\n        tree = ast.parse(f.read(), filename=file_path)\n\n    violations = []\n    for node in ast.walk(tree):\n        if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):\n            func_lines = node.end_lineno - node.lineno\n            if func_lines > MAX_FUNCTION_LINES:\n                violations.append((node.name, node.lineno, func_lines))\n    return violations\n\ndef validate_rust_file(file_path):\n    \"\"\"Validate Rust file function sizes (basic approach).\"\"\"\n    # Parse with regex or rust-code-analysis output\n    # Count lines between 'fn name' and matching '}'\n    pass\n\ndef main(files):\n    violations = {}\n    for file_path in files:\n        if file_path.endswith('.py'):\n            file_violations = validate_python_file(file_path)\n        elif file_path.endswith('.rs'):\n            file_violations = validate_rust_file(file_path)\n        else:\n            continue\n\n        if file_violations:\n            violations[file_path] = file_violations\n\n    if violations:\n        print(\"Function size violations:\")\n        for path, funcs in violations.items():\n            print(f\"  {path}:\")\n            for name, line, count in funcs:\n                print(f\"    {name} (line {line}): {count} lines (max: {MAX_FUNCTION_LINES})\")\n        sys.exit(1)\n    sys.exit(0)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n```\n\n**Interface:**\n- Input: List of file paths\n- Output: Violation report with function names and locations\n- Exit code: 0 (pass), 1 (violations)\n\n### Component 6: Type Hint Coverage Script\n\n**Purpose:** Add type hints to Python code systematically\n\n**File:** `scripts/add_type_hints.py` (development tool, not in pre-commit)\n\n**Approach:**\n1. Use `monkeytype` to generate type hints from runtime\n2. Review and apply generated types\n3. Manually add remaining hints\n4. Verify with mypy --strict\n\n**Process:**\n```bash\n# Install monkeytype\npip install monkeytype\n\n# Run code with monkeytype tracing\nmonkeytype run -m pytest\n\n# Generate stubs\nmonkeytype stub zlibrary_downloader.cli\nmonkeytype stub zlibrary_downloader.client\nmonkeytype stub zlibrary_downloader.tui\n\n# Apply stubs\nmonkeytype apply zlibrary_downloader.cli\n# ... review and commit\n```\n\n## Configuration Files\n\n### 1. Pre-commit Configuration\n\n**File:** `.pre-commit-config.yaml`\n\n**Location:** Repository root\n\n**Content:** See Component 1 above\n\n### 2. Python Tool Configuration\n\n**File:** `packages/python/zlibrary-downloader/pyproject.toml`\n\n**Extensions:**\n```toml\n[tool.mypy]\npython_version = \"3.8\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ndisallow_any_unimported = true\nno_implicit_optional = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\nwarn_no_return = true\nwarn_unreachable = true\n\n[tool.black]\nline-length = 100\ntarget-version = ['py38']\nexclude = '''\n/(\n    \\.git\n  | \\.venv\n  | venv\n  | __pycache__\n  | \\.eggs\n  | \\.egg-info\n)/\n'''\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\naddopts = \"\"\"\n    --cov=zlibrary_downloader\n    --cov-report=term-missing\n    --cov-report=html\n    --cov-fail-under=80\n    --strict-markers\n    -v\n\"\"\"\n\n[tool.coverage.run]\nsource = [\"zlibrary_downloader\"]\nomit = [\"*/tests/*\", \"*/venv/*\"]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n    \"if __name__ == .__main__.:\",\n    \"if TYPE_CHECKING:\",\n]\n```\n\n### 3. Flake8 Configuration\n\n**File:** `.flake8`\n\n**Location:** Repository root or Python package root\n\n**Content:**\n```ini\n[flake8]\nmax-line-length = 100\nmax-complexity = 10\nextend-ignore = E203, W503, E501\nexclude =\n    .git,\n    __pycache__,\n    venv,\n    .venv,\n    *.egg-info,\n    build,\n    dist\nper-file-ignores =\n    __init__.py:F401\n```\n\n### 4. Rust Clippy Configuration\n\n**File:** `packages/rust/Cargo.toml`\n\n**Extensions:**\n```toml\n[workspace.lints.clippy]\nall = \"warn\"\npedantic = \"warn\"\nunwrap_used = \"deny\"\nexpect_used = \"deny\"\npanic = \"deny\"\nmissing_docs_in_private_items = \"warn\"\n```\n\n### 5. Rustfmt Configuration\n\n**File:** `rustfmt.toml` (optional)\n\n**Location:** Repository root or Rust workspace root\n\n**Content:** (use defaults, or customize)\n```toml\nedition = \"2021\"\nmax_width = 100\ntab_spaces = 4\n```\n\n## Error Handling\n\n### Error Scenario 1: Pre-commit Tool Not Installed\n\n**Scenario:** Developer clones repo but hasn't run `pre-commit install`\n\n**Handling:**\n- Commit proceeds without checks (git default behavior)\n- README instructions emphasize running `pre-commit install`\n\n**User Impact:**\n- Manual step required during setup\n- Clear documentation prevents this\n\n**Mitigation:**\n- Include setup script that runs `pre-commit install`\n- Consider adding to `.git/hooks/post-checkout` automation\n\n### Error Scenario 2: Quality Check Fails\n\n**Scenario:** Developer commits code with type errors, linting violations, etc.\n\n**Handling:**\n- Pre-commit blocks commit\n- Display tool output showing specific errors\n- Provide actionable error messages\n\n**User Impact:**\n```\nmypy....................................................................Failed\n- hook id: mypy\n- exit code: 1\n\nzlibrary_downloader/cli.py:45: error: Function is missing a return type annotation\nzlibrary_downloader/client.py:123: error: Argument 1 to \"search\" has incompatible type \"str\"; expected \"Optional[str]\"\n\nflake8..................................................................Failed\n- hook id: flake8\n- exit code: 1\n\nzlibrary_downloader/tui.py:200:101: E501 line too long (105 > 100 characters)\n```\n\n**Resolution:** Fix errors and re-commit\n\n### Error Scenario 3: Complexity Violation\n\n**Scenario:** Function exceeds cyclomatic complexity of 10\n\n**Handling:**\n- Custom script reports violation with function name and complexity score\n- Provide guidance on refactoring\n\n**User Impact:**\n```\nRust complexity check...................................................Failed\n- hook id: rust-complexity\n- exit code: 1\n\nComplexity violations found:\n  packages/rust/text-extractor/src/main.rs:\n    strip_html_tags (line 157): complexity 12 (max: 10)\n\nSuggestion: Break this function into smaller helper functions\n\nPython complexity check.................................................Failed\n- hook id: radon-complexity\n- exit code: 1\n\nComplexity violations found:\n  packages/python/zlibrary-downloader/zlibrary_downloader/tui.py:\n    get_search_params (line 47): complexity 11 (max: 10)\n```\n\n**Resolution:** Refactor function into smaller units\n\n### Error Scenario 4: File Size Violation\n\n**Scenario:** File exceeds 400 lines\n\n**Handling:**\n- Line count validator reports violation with exact count\n- Suggest splitting into modules\n\n**User Impact:**\n```\nLine count validation...................................................Failed\n- hook id: line-count\n- exit code: 1\n\nLine count violations:\n  packages/python/zlibrary-downloader/zlibrary_downloader/client.py: 428 lines (max: 400)\n\nSuggestion: Split this file into smaller modules (e.g., client_auth.py, client_search.py)\n```\n\n**Resolution:** Refactor file into multiple modules\n\n### Error Scenario 5: Bypassing Hooks (Emergency)\n\n**Scenario:** Developer needs to commit urgently despite violations\n\n**Handling:**\n- Allow bypass with `git commit --no-verify`\n- Document that this should be rare and requires justification\n\n**User Impact:**\n- Commit succeeds but CI/CD will catch violations later\n- Team review required\n\n**Policy:**\n- Bypass only for WIP commits on feature branches\n- Must fix before merging to main\n\n### Error Scenario 6: Tool Installation Missing\n\n**Scenario:** Required tool (mypy, radon, rust-code-analysis) not installed\n\n**Handling:**\n- Hook fails with clear error message\n- Provide installation command\n\n**User Impact:**\n```\nmypy....................................................................Failed\n- hook id: mypy\n- exit code: 127\n\nError: mypy is not installed.\nInstall with: pip install mypy>=1.8.0\n\nOr install all dev dependencies:\n  cd packages/python/zlibrary-downloader\n  pip install -e \".[dev]\"\n```\n\n**Resolution:** Install missing tool\n\n## Testing Strategy\n\n### Unit Testing: Quality Tool Scripts\n\n**Approach:** Test custom validators in isolation\n\n**Tests:**\n1. **Line count validator**\n   - Test with file exactly at 400 lines → pass\n   - Test with file at 401 lines → fail\n   - Test exclusion patterns work (test files ignored)\n\n2. **Function size validator**\n   - Test with function exactly at 30 lines → pass\n   - Test with function at 31 lines → fail\n   - Test Python AST parsing correctly counts lines\n   - Test Rust function detection\n\n3. **Complexity parsers**\n   - Test parsing rust-code-analysis JSON output\n   - Test parsing radon JSON output\n   - Test threshold detection\n\n**Framework:** pytest for Python validators\n\n**Location:** `scripts/tests/`\n\n### Integration Testing: Pre-commit Workflow\n\n**Approach:** Test end-to-end pre-commit behavior\n\n**Tests:**\n1. **Clean commit**\n   - Create compliant code change\n   - Run `pre-commit run --all-files`\n   - Verify exit code 0\n\n2. **Type error commit**\n   - Create code with type error\n   - Attempt commit\n   - Verify blocked with mypy error\n\n3. **Formatting commit**\n   - Create improperly formatted code\n   - Run black auto-fix\n   - Verify code reformatted\n\n4. **Complexity violation commit**\n   - Create function with complexity >10\n   - Attempt commit\n   - Verify blocked with complexity error\n\n**Setup:**\n- Temporary git repository for testing\n- Pre-commit installed and configured\n- Sample violating code\n\n**Framework:** Bash scripts or pytest with subprocess\n\n### End-to-End Testing: Developer Workflow\n\n**Approach:** Simulate real developer scenarios\n\n**Scenarios:**\n1. **New developer setup**\n   - Clone repository\n   - Follow README setup instructions\n   - Run pre-commit install\n   - Make compliant change and commit successfully\n\n2. **Fix type hints workflow**\n   - Run mypy, see errors\n   - Add type hints\n   - Re-run mypy, verify pass\n   - Commit successfully\n\n3. **Refactor complexity workflow**\n   - Run complexity check, find violation\n   - Refactor function into smaller units\n   - Re-run complexity check, verify pass\n   - Commit successfully\n\n**Manual Testing:**\n- Document test scenarios\n- Execute on fresh clone\n- Verify on Linux, macOS, Windows (WSL)\n\n### Regression Testing\n\n**Approach:** Ensure existing code still works\n\n**Tests:**\n1. Run all existing tests after adding type hints\n2. Verify Rust build still succeeds after adding clippy config\n3. Verify Python package still runs after formatting with black\n\n**Success Criteria:**\n- All existing tests pass\n- No runtime behavior changes\n- Build/run commands unchanged\n\n### Performance Testing\n\n**Approach:** Measure pre-commit hook execution time\n\n**Target:** <30 seconds for typical commit (Requirements)\n\n**Measurements:**\n1. Time each hook individually\n2. Identify slowest checks\n3. Optimize if needed (caching, incremental checks)\n\n**Tools:**\n- `time` command\n- Pre-commit built-in timing (--verbose)\n\n**Optimization Options:**\n- Use pre-commit's file filtering (only check changed files)\n- Enable caching for mypy\n- Run independent checks in parallel\n",
  "fileStats": {
    "size": 28145,
    "lines": 1098,
    "lastModified": "2025-10-15T14:05:41.225Z"
  },
  "comments": []
}