{
  "id": "snapshot_1760626491830_0isk85gl6",
  "approvalId": "approval_1760626024382_p4kxhjj2c",
  "approvalTitle": "Tasks Document - Multi-Credential Downloader",
  "version": 2,
  "timestamp": "2025-10-16T14:54:51.830Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# Tasks Document\n\n## Phase 1: Core Infrastructure\n\n- [ ] 1. Create Credential Data Model\n  - File: packages/python/zlibrary-downloader/zlibrary_downloader/credential.py\n  - Define CredentialStatus enum (VALID, INVALID, EXHAUSTED)\n  - Define Credential dataclass with all required fields (identifier, email, password, remix_userid, remix_userkey, status, downloads_left, last_used, last_validated)\n  - Add is_available() method to check if credential can be used\n  - Add to_dict() and from_dict() methods for serialization\n  - Purpose: Establish type-safe credential data model\n  - _Leverage: Python dataclasses, enum, datetime_\n  - _Requirements: 1.1, 1.2_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Python Developer specializing in data modeling and type systems | Task: Create comprehensive Credential data model in packages/python/zlibrary-downloader/zlibrary_downloader/credential.py with CredentialStatus enum and Credential dataclass following requirements 1.1 and 1.2. The dataclass should use type hints and include methods for availability checking and serialization. | Restrictions: Use Python 3.8+ features, follow PEP 8 naming conventions, do not add external dependencies beyond standard library | Success: Credential model is well-defined with proper type hints, serialization methods work correctly, is_available() logic is sound. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 2. Write Credential Model Unit Tests\n  - File: packages/python/zlibrary-downloader/tests/test_credential.py\n  - Test CredentialStatus enum values\n  - Test Credential dataclass instantiation with various combinations\n  - Test is_available() method logic\n  - Test to_dict() and from_dict() serialization\n  - Achieve >80% code coverage\n  - Purpose: Ensure credential model reliability\n  - _Leverage: pytest framework_\n  - _Requirements: 1.1, 1.2_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer with expertise in Python unit testing and pytest | Task: Create comprehensive unit tests for Credential model in packages/python/zlibrary-downloader/tests/test_credential.py covering requirements 1.1 and 1.2. Test all enum values, dataclass instantiation, availability logic, and serialization/deserialization. | Restrictions: Use pytest framework, test both success and failure scenarios, ensure test isolation, aim for >80% coverage | Success: All Credential functionality is tested, edge cases covered, tests run independently and pass consistently. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 3. Implement Rotation State Persistence\n  - File: packages/python/zlibrary-downloader/zlibrary_downloader/rotation_state.py\n  - Define RotationState class with state_file path\n  - Implement save() method to write JSON state file\n  - Implement load() method to read JSON state file\n  - Implement exists() and validate() methods\n  - Handle missing and corrupted state files gracefully\n  - Set proper file permissions (chmod 600 on Unix)\n  - Purpose: Provide persistent rotation state storage\n  - _Leverage: json, pathlib, os modules_\n  - _Requirements: 5.1, 5.2_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Python Developer with expertise in file I/O and state management | Task: Create RotationState class in packages/python/zlibrary-downloader/zlibrary_downloader/rotation_state.py for persistent state storage following requirements 5.1 and 5.2. Implement JSON-based save/load with corruption handling and proper file permissions. | Restrictions: Use only standard library (json, pathlib, os), handle file permissions cross-platform, ensure atomic writes, validate JSON structure | Success: State can be saved and loaded reliably, corrupted files handled gracefully, file permissions set correctly on Unix systems. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 4. Write Rotation State Unit Tests\n  - File: packages/python/zlibrary-downloader/tests/test_rotation_state.py\n  - Test save() and load() methods\n  - Test handling of missing state files\n  - Test handling of corrupted JSON\n  - Test file permissions on Unix systems\n  - Test state validation logic\n  - Achieve >80% code coverage\n  - Purpose: Ensure state persistence reliability\n  - _Leverage: pytest, tempfile for test isolation_\n  - _Requirements: 5.1, 5.2_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer with expertise in file I/O testing and pytest | Task: Create comprehensive unit tests for RotationState in packages/python/zlibrary-downloader/tests/test_rotation_state.py covering requirements 5.1 and 5.2. Test save/load operations, corruption handling, and file permissions. | Restrictions: Use pytest and tempfile, test cross-platform behavior where applicable, ensure test cleanup, aim for >80% coverage | Success: All state persistence functionality tested, edge cases like corruption and missing files covered, tests are isolated and reliable. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 5. Implement Credential Manager Core\n  - File: packages/python/zlibrary-downloader/zlibrary_downloader/credential_manager.py\n  - Create CredentialManager class with credentials list and current_index\n  - Implement load_credentials() to parse .env (both single and multi-credential formats)\n  - Implement get_current() to return currently active credential\n  - Implement rotate() to move to next available credential with wrap-around\n  - Implement get_available() to filter out invalid/exhausted credentials\n  - Integrate with RotationState for state persistence\n  - Purpose: Manage credential lifecycle and rotation logic\n  - _Leverage: Credential model, RotationState, python-dotenv_\n  - _Requirements: 1.1, 2.1, 2.2, 2.3, 5.1_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Python Developer specializing in business logic and state management | Task: Create CredentialManager class in packages/python/zlibrary-downloader/zlibrary_downloader/credential_manager.py following requirements 1.1, 2.1, 2.2, 2.3, and 5.1. Implement credential loading from .env (supporting both single and multi-credential formats), rotation logic with wrap-around, and state persistence integration. | Restrictions: Must support backward compatibility with single-credential format, handle edge cases like all credentials exhausted, follow single responsibility principle | Success: Credentials load from both .env formats, rotation works with proper wrap-around, state persists correctly, available credential filtering works. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 6. Implement Credential Validation\n  - File: packages/python/zlibrary-downloader/zlibrary_downloader/credential_manager.py (extend)\n  - Add validate_credential() method that tests credential with Zlibrary client\n  - Use getProfile() API call to verify credential validity\n  - Update credential status based on validation result\n  - Fetch download limits during validation\n  - Add update_downloads_left() method\n  - Handle network errors with retry logic (2 attempts)\n  - Purpose: Verify credential validity and track quotas\n  - _Leverage: Existing Zlibrary client (packages/python/zlibrary-downloader/zlibrary_downloader/client.py)_\n  - _Requirements: 1.3, 1.4, 4.1, 4.2_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Python Developer with expertise in API integration and error handling | Task: Extend CredentialManager in packages/python/zlibrary-downloader/zlibrary_downloader/credential_manager.py with validation methods following requirements 1.3, 1.4, 4.1, and 4.2. Implement credential validation using Zlibrary client's getProfile() method, download limit tracking, and robust error handling with retries. | Restrictions: Reuse existing Zlibrary client, never log passwords, implement retry logic (max 2 attempts), handle network timeouts gracefully | Success: Credentials validate correctly against Z-Library API, download limits fetched and tracked, network errors handled with retries, no sensitive data logged. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 7. Write Credential Manager Unit Tests\n  - File: packages/python/zlibrary-downloader/tests/test_credential_manager.py\n  - Test credential loading (single and multi-credential formats)\n  - Test rotation logic and wrap-around behavior\n  - Test get_available() filtering\n  - Test validation with mocked Zlibrary client\n  - Test state persistence integration\n  - Test error handling (all credentials exhausted, invalid, etc.)\n  - Achieve >80% code coverage\n  - Purpose: Ensure credential management reliability\n  - _Leverage: pytest, unittest.mock for mocking Zlibrary client_\n  - _Requirements: 1.1, 1.3, 1.4, 2.1, 2.2, 2.3, 4.1, 4.2, 5.1_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer with expertise in Python testing, mocking, and pytest | Task: Create comprehensive unit tests for CredentialManager in packages/python/zlibrary-downloader/tests/test_credential_manager.py covering requirements 1.1, 1.3, 1.4, 2.1, 2.2, 2.3, 4.1, 4.2, and 5.1. Mock Zlibrary client for validation tests, test both .env formats, rotation logic, and error scenarios. | Restrictions: Use pytest and unittest.mock, mock external dependencies (Zlibrary client), test both success and failure paths, ensure test isolation, aim for >80% coverage | Success: All CredentialManager functionality tested including .env parsing, rotation, validation, and error handling. Tests are reliable and cover edge cases. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 8. Implement Client Pool\n  - File: packages/python/zlibrary-downloader/zlibrary_downloader/client_pool.py\n  - Create ZlibraryClientPool class with credential_manager and clients dict\n  - Implement get_current_client() to return cached or create new Zlibrary client\n  - Implement rotate_client() to rotate credential and return new client\n  - Implement validate_all() to test all credentials\n  - Implement refresh_client() to recreate client for a credential\n  - Cache Zlibrary client instances by credential identifier\n  - Purpose: Manage Zlibrary client instances with credential awareness\n  - _Leverage: CredentialManager, existing Zlibrary client_\n  - _Requirements: 2.1, 3.1, 3.2, 3.3_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Python Developer specializing in resource management and caching patterns | Task: Create ZlibraryClientPool class in packages/python/zlibrary-downloader/zlibrary_downloader/client_pool.py following requirements 2.1, 3.1, 3.2, and 3.3. Implement client caching by credential identifier, rotation integration with CredentialManager, and validation methods. | Restrictions: Cache clients to avoid repeated authentication, handle credential rotation transparently, properly handle client creation failures, maintain separation of concerns | Success: Clients are properly cached and reused, rotation triggers client switching, validation tests all credentials, client creation errors handled gracefully. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 9. Write Client Pool Unit Tests\n  - File: packages/python/zlibrary-downloader/tests/test_client_pool.py\n  - Test client caching (same credential returns cached client)\n  - Test get_current_client() and rotate_client()\n  - Test validate_all() with various credential states\n  - Test refresh_client() recreates client\n  - Test error handling for client creation failures\n  - Achieve >80% code coverage\n  - Purpose: Ensure client pool reliability\n  - _Leverage: pytest, unittest.mock for mocking CredentialManager and Zlibrary_\n  - _Requirements: 2.1, 3.1, 3.2, 3.3_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer with expertise in caching patterns and integration testing | Task: Create comprehensive unit tests for ZlibraryClientPool in packages/python/zlibrary-downloader/tests/test_client_pool.py covering requirements 2.1, 3.1, 3.2, and 3.3. Test caching behavior, rotation, validation, and error scenarios. | Restrictions: Use pytest and unittest.mock, mock CredentialManager and Zlibrary client, verify caching effectiveness, test error handling, aim for >80% coverage | Success: All ClientPool functionality tested including caching, rotation, validation, and error handling. Tests verify clients are reused appropriately. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n## Phase 2: CLI Integration\n\n- [ ] 10. Update CLI for Multi-Credential Support\n  - File: packages/python/zlibrary-downloader/zlibrary_downloader/cli.py\n  - Refactor load_credentials() to use CredentialManager\n  - Refactor initialize_zlibrary() to use ClientPool\n  - Add display_credential_status() function to show account summary\n  - Update help text and documentation\n  - Maintain backward compatibility with single-credential format\n  - Purpose: Integrate credential management into CLI\n  - _Leverage: CredentialManager, ClientPool_\n  - _Requirements: 1.1, 1.3, 1.4, 1.5, 5.1, 5.2, 5.3, 5.4_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Full-stack Python Developer with CLI application expertise | Task: Refactor CLI in packages/python/zlibrary-downloader/zlibrary_downloader/cli.py to integrate CredentialManager and ClientPool following requirements 1.1, 1.3, 1.4, 1.5, 5.1, 5.2, 5.3, and 5.4. Update initialization, add credential status display, maintain backward compatibility. | Restrictions: Do not break existing CLI interface, maintain backward compatibility with single credential, preserve existing command-line arguments, follow existing CLI patterns | Success: CLI initializes with CredentialManager and ClientPool, displays credential status on startup, single-credential format still works, help text updated. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 11. Implement Automatic Rotation in Operations\n  - File: packages/python/zlibrary-downloader/zlibrary_downloader/cli.py (extend)\n  - Add rotation call after successful search_books() operation\n  - Add rotation call after successful download_book() operation\n  - Update download limit tracking after downloads\n  - Add logging for rotation events\n  - Handle credential exhaustion gracefully\n  - Purpose: Enable automatic credential switching\n  - _Leverage: ClientPool, CredentialManager_\n  - _Requirements: 2.2, 2.3, 3.2, 3.3, 4.2, 4.3_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Backend Python Developer with expertise in workflow automation | Task: Extend CLI operations in packages/python/zlibrary-downloader/zlibrary_downloader/cli.py to integrate automatic rotation following requirements 2.2, 2.3, 3.2, 3.3, 4.2, and 4.3. Add rotation after search/download operations, update download limits, implement proper logging. | Restrictions: Only rotate after successful operations, handle errors without losing state, log rotation events (not credentials), maintain operation transparency to user | Success: Rotation occurs automatically after operations, download limits update correctly, exhausted credentials skipped, rotation events logged appropriately. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 12. Implement Graceful Fallback and Error Handling\n  - File: packages/python/zlibrary-downloader/zlibrary_downloader/cli.py (extend)\n  - Add retry logic for failed operations with next credential\n  - Implement automatic skip for exhausted credentials\n  - Add clear error messages for credential issues\n  - Handle \"all credentials exhausted\" scenario\n  - Add warning messages for approaching limits\n  - Purpose: Ensure robust error handling\n  - _Leverage: ClientPool, CredentialManager error handling_\n  - _Requirements: 3.4, 4.3, 4.4, 5.4_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Python Developer specializing in error handling and resilience patterns | Task: Implement comprehensive error handling in packages/python/zlibrary-downloader/zlibrary_downloader/cli.py following requirements 3.4, 4.3, 4.4, and 5.4. Add retry logic, exhaustion handling, clear error messages, and warning system. | Restrictions: Retry with next credential on failures, do not expose credentials in errors, provide actionable error messages, limit retry attempts to avoid infinite loops | Success: Operations retry with next credential on failure, exhausted credentials skipped automatically, clear error messages displayed, all-exhausted scenario handled gracefully. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 13. Write CLI Integration Tests\n  - File: packages/python/zlibrary-downloader/tests/test_cli_integration.py\n  - Test CLI initialization with multi-credential setup\n  - Test search operation with rotation\n  - Test download operation with rotation and limit tracking\n  - Test backward compatibility with single credential\n  - Test error scenarios (all exhausted, invalid credentials)\n  - Test credential status display\n  - Purpose: Ensure CLI integration works end-to-end\n  - _Leverage: pytest, unittest.mock for API mocking_\n  - _Requirements: All Phase 1-2 requirements_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer with expertise in integration testing and CLI testing | Task: Create comprehensive integration tests for CLI in packages/python/zlibrary-downloader/tests/test_cli_integration.py covering all Phase 1-2 requirements. Test initialization, operations with rotation, backward compatibility, and error scenarios. | Restrictions: Use pytest and mocking for external APIs, test real workflow scenarios, ensure tests are independent, verify both success and failure paths | Success: All CLI integration scenarios tested including initialization, rotation during operations, error handling, and backward compatibility. Tests are reliable and comprehensive. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n## Phase 3: Documentation and Testing\n\n- [ ] 14. Create .env.example with Multi-Credential Format\n  - File: packages/python/zlibrary-downloader/.env.example\n  - Document single-credential format\n  - Document multi-credential format with examples\n  - Add comments explaining each field\n  - Include optional configuration (state file path)\n  - Show both email/password and remix token auth\n  - Purpose: Provide clear configuration template\n  - _Leverage: Existing .env.example structure_\n  - _Requirements: 1.1, 1.2, 5.1_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Technical Writer with expertise in configuration documentation | Task: Create comprehensive .env.example in packages/python/zlibrary-downloader/.env.example following requirements 1.1, 1.2, and 5.1. Document both single and multi-credential formats with clear examples and comments. | Restrictions: Use clear, non-technical language, include examples for both auth methods, explain optional fields, maintain consistency with existing format | Success: .env.example is clear and comprehensive, includes examples for all credential types, explains optional configuration, easy for users to understand and adapt. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 15. Update README.md with Multi-Credential Guide\n  - File: packages/python/zlibrary-downloader/README.md\n  - Add multi-credential setup section\n  - Document configuration format and options\n  - Explain rotation behavior\n  - Add troubleshooting tips\n  - Include migration guide from single to multi-credential\n  - Purpose: Provide user-facing documentation\n  - _Leverage: Existing README.md structure_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Technical Writer specializing in user documentation | Task: Update README.md in packages/python/zlibrary-downloader/README.md to document multi-credential feature covering all requirements. Add setup instructions, rotation explanation, troubleshooting, and migration guide. | Restrictions: Write for end-users (not developers), include practical examples, maintain existing README structure, use clear screenshots or diagrams if helpful | Success: README clearly explains multi-credential feature, setup instructions are easy to follow, troubleshooting section addresses common issues, migration path is clear. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 16. Run Full Test Suite and Fix Issues\n  - Files: All test files\n  - Run pytest on all unit tests\n  - Run integration tests\n  - Generate coverage report (target >80%)\n  - Fix any failing tests\n  - Fix any coverage gaps\n  - Purpose: Ensure all code is tested and working\n  - _Leverage: pytest, coverage.py_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer responsible for test quality and coverage | Task: Execute complete test suite for multi-credential-downloader, generate coverage report, and fix any issues to achieve >80% coverage target. Run all unit and integration tests. | Restrictions: All tests must pass, coverage should be >80% for new code, do not skip or disable tests to achieve coverage, fix root causes not symptoms | Success: All tests pass consistently, coverage report shows >80% for new modules, no critical gaps in test coverage, test suite runs reliably. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 17. Perform End-to-End Manual Testing\n  - Test backward compatibility with single credential .env\n  - Test multi-credential setup with 2-3 accounts\n  - Perform 10+ operations to verify rotation\n  - Test credential exhaustion scenario\n  - Test \"all credentials exhausted\" scenario\n  - Test application restart with state persistence\n  - Test error recovery and fallback\n  - Purpose: Validate real-world usage scenarios\n  - _Leverage: Real or test Z-Library accounts_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer specializing in manual testing and user acceptance | Task: Perform comprehensive end-to-end manual testing of multi-credential feature covering all requirements. Test backward compatibility, rotation across multiple operations, exhaustion scenarios, state persistence, and error recovery. | Restrictions: Test with real workflow scenarios, verify user-visible behavior, document any issues found, test both happy path and error scenarios | Success: All user scenarios work as expected, backward compatibility verified, rotation works across 10+ operations, state persists correctly, errors handled gracefully. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n- [ ] 18. Code Review and Cleanup\n  - Review all new code for quality\n  - Ensure consistent code style (PEP 8)\n  - Add type hints where missing\n  - Update docstrings for all public methods\n  - Remove debug logging\n  - Optimize performance where applicable\n  - Purpose: Ensure code quality and maintainability\n  - _Leverage: pylint, mypy, black for formatting_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec multi-credential-downloader. First run spec-workflow-guide to get the workflow guide then implement the task: Role: Senior Python Developer responsible for code quality | Task: Perform comprehensive code review and cleanup of all multi-credential code. Ensure PEP 8 compliance, complete type hints, proper docstrings, remove debug code, and optimize performance. | Restrictions: Follow PEP 8 strictly, ensure all public APIs documented, do not change behavior during cleanup, use automated tools (pylint, mypy, black), maintain backward compatibility | Success: All code follows PEP 8, type hints complete, docstrings comprehensive, no debug code remains, performance optimized where applicable, passes linting and type checking. Mark task as [-] when starting and [x] when complete in .spec-workflow/specs/multi-credential-downloader/tasks.md_\n\n## Summary\n\n**Total Tasks**: 18\n**Estimated Effort**: 30-40 hours\n\n### Task Dependencies\n\n```\nPhase 1: Core Infrastructure (Tasks 1-9)\n1 → 2 (Credential model → tests)\n3 → 4 (Rotation state → tests)\n1, 3 → 5 (Models → CredentialManager core)\n5 → 6 (Manager core → validation)\n6 → 7 (Validation → manager tests)\n5 → 8 (Manager → ClientPool)\n8 → 9 (ClientPool → tests)\n\nPhase 2: CLI Integration (Tasks 10-13)\n1-9 → 10 (All Phase 1 → CLI update)\n10 → 11 (CLI update → rotation integration)\n11 → 12 (Rotation → error handling)\n1-12 → 13 (All → integration tests)\n\nPhase 3: Documentation and Testing (Tasks 14-18)\n1-13 → 14, 15 (All → documentation)\n1-15 → 16 (All → full test suite)\n1-16 → 17 (All → E2E testing)\n1-17 → 18 (All → final review)\n```\n\n### Quality Gates\n\n- All unit tests passing (>80% coverage)\n- All integration tests passing\n- PEP 8 compliance (pylint score >8.0)\n- Type checking passing (mypy --strict)\n- Manual E2E testing completed\n- Documentation complete and reviewed\n- Backward compatibility verified\n",
  "fileStats": {
    "size": 27475,
    "lines": 273,
    "lastModified": "2025-10-16T14:46:18.606Z"
  },
  "comments": []
}