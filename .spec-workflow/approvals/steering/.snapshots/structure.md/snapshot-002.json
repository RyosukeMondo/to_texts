{
  "id": "snapshot_1760536100758_76qd7oql6",
  "approvalId": "approval_1760535938387_3xvuv0dun",
  "approvalTitle": "Project Structure Document",
  "version": 2,
  "timestamp": "2025-10-15T13:48:20.758Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Project Structure\n\n## Directory Organization\n\n```\nto_texts/                              # Monorepo root\n├── .env.example                       # Environment variables template\n├── .gitignore                         # Root gitignore\n├── README.md                          # Main project documentation\n│\n├── .spec-workflow/                    # Spec workflow configuration\n│   ├── steering/                      # Steering documents\n│   │   ├── product.md                 # Product overview\n│   │   ├── tech.md                    # Technology stack\n│   │   └── structure.md               # This document\n│   └── templates/                     # Document templates\n│\n├── docs/                              # Additional documentation\n│   ├── text-extractor.md\n│   └── zlibrary-downloader.md\n│\n├── packages/                          # All sub-projects\n│   ├── rust/                          # Rust workspace\n│   │   ├── Cargo.toml                 # Workspace manifest\n│   │   ├── Cargo.lock                 # Dependency lock file\n│   │   ├── target/                    # Build artifacts (gitignored)\n│   │   │   ├── debug/                 # Debug builds\n│   │   │   └── release/               # Release builds\n│   │   │\n│   │   └── text-extractor/            # PDF/EPUB text extraction tool\n│   │       ├── Cargo.toml             # Package manifest\n│   │       ├── README.md              # Package documentation\n│   │       ├── src/\n│   │       │   └── main.rs            # Entry point and core logic\n│   │       └── test_epub.rs           # Integration tests\n│   │\n│   └── python/                        # Python projects\n│       └── zlibrary-downloader/       # Z-Library downloader tool\n│           ├── pyproject.toml         # Package configuration (PEP 517/518)\n│           ├── requirements.txt       # Dependencies\n│           ├── README.md              # Package documentation\n│           │\n│           ├── scripts/               # Utility scripts\n│           │   ├── setup.sh           # Virtual environment setup\n│           │   └── run.sh             # CLI wrapper script\n│           │\n│           ├── venv/                  # Virtual environment (gitignored)\n│           │\n│           └── zlibrary_downloader/   # Python package\n│               ├── __init__.py        # Package initialization\n│               ├── cli.py             # CLI entry point and argument parsing\n│               ├── client.py          # Z-Library API wrapper\n│               └── tui.py             # Rich-based TUI interface\n│\n├── downloads/                         # Downloaded books (gitignored)\n└── tmp/                               # Temporary/extracted files (gitignored)\n```\n\n## Naming Conventions\n\n### Files\n\n**Rust:**\n- **Modules**: `snake_case` (e.g., `main.rs`, `pdf_utils.rs`)\n- **Tests**: `test_*.rs` or inline with `#[cfg(test)]` modules\n- **Constants**: Follow Rust standard (`Cargo.toml`, `Cargo.lock`)\n\n**Python:**\n- **Modules**: `snake_case` (e.g., `cli.py`, `client.py`, `tui.py`)\n- **Packages**: `snake_case` directories with `__init__.py`\n- **Tests**: `test_*.py` or `*_test.py` in `tests/` directory\n- **Scripts**: `kebab-case.sh` for shell scripts\n\n**Documentation:**\n- **Markdown**: `kebab-case.md` (e.g., `text-extractor.md`)\n- **README files**: `README.md` (uppercase)\n\n### Code\n\n**Rust:**\n- **Structs/Enums/Traits**: `PascalCase` (e.g., `Args`, `Result`)\n- **Functions/Methods**: `snake_case` (e.g., `extract_pdf_text`, `generate_output_path`)\n- **Constants**: `UPPER_SNAKE_CASE` (e.g., `MAX_FILE_SIZE`)\n- **Variables**: `snake_case` (e.g., `pdf_path`, `output_dir`)\n- **Type Parameters**: Single uppercase letter or `PascalCase` (e.g., `T`, `Item`)\n\n**Python:**\n- **Classes**: `PascalCase` (e.g., `Zlibrary`, `ZLibraryTUI`)\n- **Functions/Methods**: `snake_case` (e.g., `search_books`, `download_book`)\n- **Constants**: `UPPER_SNAKE_CASE` (e.g., `FORMATS`, `LANGUAGES`)\n- **Variables**: `snake_case` (e.g., `z_client`, `book_num`)\n- **Private members**: Prefix with single underscore (e.g., `_loggedin`, `__makePostRequest`)\n\n## Import Patterns\n\n### Rust Import Order\n\n```rust\n// 1. Standard library\nuse std::fs;\nuse std::path::{Path, PathBuf};\n\n// 2. External crates (alphabetical)\nuse anyhow::{Context, Result};\nuse clap::Parser;\nuse walkdir::WalkDir;\n\n// 3. Internal modules (if any)\n// use crate::utils;\n// use crate::models::Book;\n```\n\n### Python Import Order\n\n```python\n# 1. Standard library\nimport os\nimport sys\nimport argparse\n\n# 2. External dependencies (alphabetical)\nimport requests\nfrom dotenv import load_dotenv\nfrom rich.console import Console\nfrom rich.table import Table\n\n# 3. Internal modules (relative imports)\nfrom .client import Zlibrary\nfrom .tui import ZLibraryTUI\n```\n\n### Module Organization\n\n**Rust:**\n- All modules use absolute imports from crate root\n- Use `crate::` for internal modules\n- External dependencies via Cargo.toml\n\n**Python:**\n- Absolute imports for external dependencies\n- Relative imports within package (`.client`, `.tui`)\n- Editable install for development (`pip install -e .`)\n\n## Code Structure Patterns\n\n### Rust Module Organization\n\n**File Structure Pattern:**\n```rust\n// 1. Imports and dependencies\nuse std::path::Path;\nuse anyhow::Result;\n\n// 2. Type definitions and structs\n#[derive(Parser, Debug)]\nstruct Args {\n    // fields\n}\n\n// 3. Main entry point (for main.rs)\nfn main() -> Result<()> {\n    // implementation\n}\n\n// 4. Public functions (business logic)\nfn extract_pdf_text(pdf_path: &Path, output_dir: &Path) -> Result<PathBuf> {\n    // implementation\n}\n\n// 5. Private helper functions\nfn strip_html_tags(html: &str) -> String {\n    // implementation\n}\n\n// 6. Tests (optional inline)\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_something() {\n        // test implementation\n    }\n}\n```\n\n### Python Module Organization\n\n**File Structure Pattern:**\n```python\n# 1. Module docstring\n\"\"\"\nModule description and purpose\n\"\"\"\n\n# 2. Imports\nimport os\nfrom typing import Optional\n\n# 3. Constants\nFORMATS = ['pdf', 'epub', 'mobi']\nDEFAULT_LIMIT = 20\n\n# 4. Classes\nclass ZLibraryTUI:\n    \"\"\"Class docstring\"\"\"\n\n    def __init__(self, client):\n        \"\"\"Constructor\"\"\"\n        pass\n\n    def public_method(self):\n        \"\"\"Public method\"\"\"\n        pass\n\n    def _private_method(self):\n        \"\"\"Private helper method\"\"\"\n        pass\n\n# 5. Module-level functions\ndef helper_function(arg1, arg2):\n    \"\"\"Function docstring\"\"\"\n    pass\n\n# 6. Main execution guard\nif __name__ == \"__main__\":\n    main()\n```\n\n### Function Organization Principles\n\n**Both Languages:**\n```\n1. Docstring/documentation comment\n2. Input validation and early returns\n3. Core logic (single level of abstraction)\n4. Error handling with context\n5. Return result\n```\n\n**Example (Rust):**\n```rust\n/// Extract text from a PDF file\nfn extract_pdf_text(pdf_path: &Path, output_dir: &Path) -> Result<PathBuf> {\n    // 1. Validate inputs\n    if !pdf_path.exists() {\n        anyhow::bail!(\"PDF does not exist\");\n    }\n\n    // 2. Core logic\n    let text = pdf_extract::extract_text(pdf_path)\n        .context(\"Failed to extract text\")?;\n\n    // 3. Generate output\n    let output_path = generate_output_path(pdf_path, output_dir, \"txt\")?;\n\n    // 4. Write result\n    fs::write(&output_path, text)\n        .context(\"Failed to write output\")?;\n\n    // 5. Return\n    Ok(output_path)\n}\n```\n\n### File Organization Principles\n\n1. **Single Responsibility**: Each file has one clear purpose\n   - `main.rs`: Entry point and orchestration\n   - `cli.py`: Argument parsing and mode selection\n   - `client.py`: API communication only\n   - `tui.py`: UI presentation only\n\n2. **Separation of Concerns**:\n   - Business logic separate from UI\n   - API client separate from CLI\n   - File I/O separate from processing logic\n\n3. **Dependency Direction**:\n   - CLI depends on client and TUI\n   - TUI depends on client\n   - Client has no dependencies on CLI/TUI\n\n## Code Organization Principles\n\n### Single Responsibility Principle\n\n**Each file has one clear purpose:**\n- `main.rs`: PDF/EPUB extraction orchestration\n- `cli.py`: Command-line interface and mode routing\n- `client.py`: Z-Library API wrapper\n- `tui.py`: Interactive terminal user interface\n\n### Modularity\n\n**Reusable components:**\n- Text extraction functions are pure and testable\n- API client can be used independently of CLI/TUI\n- TUI can be instantiated programmatically\n\n### Testability\n\n**Structure for testing:**\n- Pure functions for transformation logic (e.g., `strip_html_tags`)\n- Dependency injection for API clients\n- Separate I/O from logic where possible\n- Integration tests in separate files\n\n### Consistency\n\n**Project-wide patterns:**\n- Error handling: Result types (Rust), exceptions (Python)\n- Configuration: Environment variables via .env\n- Output: User-specified directories\n- Logging: stdout/stderr conventions\n\n## Module Boundaries\n\n### Rust Workspace Boundaries\n\n**Current Structure:**\n- Single crate: `text-extractor`\n- Future: Additional crates for shared utilities\n\n**Dependency Direction:**\n```\ntext-extractor\n  ├── pdf-extract (external)\n  ├── epub (external)\n  └── shared utilities (future internal crate)\n```\n\n### Python Package Boundaries\n\n**Package Structure:**\n```\nzlibrary_downloader/\n  ├── __init__.py      # Package exports\n  ├── cli.py           # Entry point (depends on client, tui)\n  ├── client.py        # API wrapper (no internal dependencies)\n  └── tui.py           # UI layer (depends on client)\n```\n\n**Dependency Direction:**\n```\ncli.py → client.py\ncli.py → tui.py → client.py\n```\n\n### Cross-Language Boundaries\n\n**Integration Point:**\n- Shell scripts/automation can call both tools\n- File system as the interface (downloads → tmp)\n- No direct code dependencies between Rust and Python\n\n**Pipeline Pattern:**\n```\nZ-Library Downloader → downloads/ → Text Extractor → tmp/\n```\n\n### Public API vs Internal\n\n**Rust (text-extractor):**\n- **Public**: Command-line interface via clap\n- **Internal**: All functions (single-file design)\n\n**Python (zlibrary-downloader):**\n- **Public**:\n  - CLI entry point: `zlibrary-downloader` command\n  - `Zlibrary` class for programmatic use\n  - `ZLibraryTUI` class for TUI integration\n- **Private**:\n  - Internal API methods (prefixed with `_` or `__`)\n  - Helper functions in modules\n\n## Code Size Guidelines\n\n### File Size Limits\n\n**Maximum: 400 lines per file**\n- Excludes blank lines and comments\n- Excludes generated code\n- Excludes test files\n- Files exceeding limit must be refactored into modules\n\n**Current Status:**\n- `main.rs`: 206 lines ✓\n- `cli.py`: 340 lines ✓\n- `client.py`: 362 lines ✓\n- `tui.py`: 364 lines ✓\n\n### Function/Method Size Limits\n\n**Maximum: 30 lines per function**\n- Excludes signature and closing brace\n- Excludes comments and blank lines\n- Complex functions must be decomposed\n\n**Audit Required:** Current codebase needs function-level audit\n\n### Complexity Limits\n\n**Maximum Cyclomatic Complexity: 10**\n- Apply to all functions in Rust and Python\n- Use `cargo-complexity` (Rust) and `radon` (Python)\n- Functions exceeding limit must be refactored\n\n**Audit Required:** Complexity analysis needed for compliance\n\n### Nesting Depth\n\n**Maximum: 4 levels of nesting**\n- Prefer early returns over deep nesting\n- Extract nested logic into helper functions\n- Use guard clauses to reduce nesting\n\n## Dashboard/Monitoring Structure\n\n### Python TUI Structure\n\n```\nzlibrary_downloader/\n└── tui.py                         # Self-contained TUI module\n    ├── ZLibraryTUI class          # Main TUI interface\n    ├── Rich components            # Tables, panels, prompts\n    └── Progress indicators        # Spinners, status\n```\n\n**Separation of Concerns:**\n- TUI is independent module with single responsibility\n- Can be used standalone via `--tui` flag\n- No business logic in TUI (delegates to client)\n- Pure presentation layer\n\n**Entry Points:**\n```python\n# Direct TUI mode\n./scripts/run.sh --tui\n\n# Programmatic use\nfrom zlibrary_downloader.tui import ZLibraryTUI\ntui = ZLibraryTUI(z_client)\ntui.run()\n```\n\n### CLI Output Structure\n\n**Text Extractor (Rust):**\n- Stdout: Progress messages, success notifications\n- Stderr: Error messages with context\n- Summary: Statistics at completion\n\n**Z-Library Downloader (Python):**\n- Stdout: Search results, download status (CLI mode)\n- Stderr: Error messages and warnings\n- Rich formatting: Colors and tables (TUI mode)\n\n## Documentation Standards\n\n### Code Documentation\n\n**Rust:**\n- **Public items**: `///` doc comments with examples\n- **Module-level**: `//!` inner doc comments\n- **Complex logic**: `//` inline comments\n- **Generate docs**: `cargo doc --open`\n\n**Python:**\n- **Classes/Functions**: Docstrings (triple quotes)\n- **Modules**: Module-level docstring at top\n- **Complex logic**: `#` inline comments\n- **Format**: Google or NumPy style\n\n### README Files\n\n**Required for:**\n- Monorepo root (main README.md)\n- Each package (packages/rust/text-extractor/README.md)\n- Each Python project (packages/python/zlibrary-downloader/README.md)\n\n**README Structure:**\n```markdown\n# Project Name\n\n## Description\n## Features\n## Installation\n## Usage\n## Examples\n## Configuration\n## License\n```\n\n### Inline Comments\n\n**When to comment:**\n- Complex algorithms or business logic\n- Non-obvious workarounds or hacks\n- TODOs and FIXMEs with issue references\n- Performance optimizations\n\n**When NOT to comment:**\n- Self-explanatory code\n- Redundant descriptions of what code does\n- Commented-out code (delete instead)\n\n## Testing Structure\n\n### Rust Tests\n\n**Location:**\n- Unit tests: Inline with `#[cfg(test)]` modules\n- Integration tests: `tests/` directory (future)\n\n**Structure:**\n```rust\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_strip_html_tags() {\n        let html = \"<p>Hello</p>\";\n        let result = strip_html_tags(html);\n        assert_eq!(result, \"Hello\");\n    }\n}\n```\n\n### Python Tests\n\n**Location:**\n- Unit tests: `tests/` directory (to be created)\n- Test files: `test_*.py` naming convention\n\n**Structure:**\n```python\nimport pytest\nfrom zlibrary_downloader.client import Zlibrary\n\ndef test_login():\n    # Test implementation\n    pass\n\ndef test_search():\n    # Test implementation\n    pass\n```\n\n**Testing Standards:**\n- Target >80% code coverage\n- Test public APIs thoroughly\n- Mock external dependencies (Z-Library API)\n- Property-based testing for pure functions\n\n## Configuration Management\n\n### Environment Variables\n\n**Location:** Root `.env` file (gitignored)\n\n**Structure:**\n```bash\n# Z-Library credentials (choose one method)\nZLIBRARY_EMAIL=user@example.com\nZLIBRARY_PASSWORD=password\n\n# OR\n\nZLIBRARY_REMIX_USERID=12345\nZLIBRARY_REMIX_USERKEY=abc123def456\n```\n\n**Loading:**\n- Python: `python-dotenv` library\n- Rust: Not required (no credentials needed)\n\n### Build Configuration\n\n**Rust:**\n- `Cargo.toml`: Workspace and package configuration\n- Build profiles: debug (default), release (optimized)\n\n**Python:**\n- `pyproject.toml`: Package metadata and dependencies\n- `requirements.txt`: Pinned dependencies for reproducibility\n\n## Quality Enforcement\n\n### Pre-commit Hooks\n\n**Configuration:** `.pre-commit-config.yaml`\n\n**Checks:**\n```yaml\nrepos:\n  - repo: local\n    hooks:\n      # Rust checks\n      - id: cargo-check\n      - id: cargo-clippy\n      - id: cargo-fmt\n      - id: cargo-complexity\n\n      # Python checks\n      - id: mypy\n      - id: flake8\n      - id: black\n      - id: radon-complexity\n\n      # Code metrics\n      - id: line-count-validator\n      - id: function-size-validator\n```\n\n### Continuous Integration (Future)\n\n**GitHub Actions Workflow:**\n```yaml\n- Rust: cargo test, clippy, fmt check\n- Python: pytest, mypy, flake8, black check\n- Complexity validation\n- Code coverage reporting\n```\n\n## Migration Path\n\n### Current State → Compliant State\n\n**Action Items:**\n1. **Add Type Hints (Python)**: Complete type annotations for mypy\n2. **Complexity Audit**: Analyze all functions, refactor violations\n3. **Line Count Audit**: Check all files and functions\n4. **Pre-commit Setup**: Install and configure hooks\n5. **Test Coverage**: Write missing tests (target >80%)\n6. **Documentation**: Add docstrings and comments\n\n**Timeline:** Target v0.2.0 for full compliance\n",
  "fileStats": {
    "size": 16602,
    "lines": 640,
    "lastModified": "2025-10-15T13:45:28.295Z"
  },
  "comments": []
}