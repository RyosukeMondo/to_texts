{
  "id": "snapshot_1760535695259_clgxv1srw",
  "approvalId": "approval_1760535695242_3c6q2lghh",
  "approvalTitle": "Technology Stack Document",
  "version": 1,
  "timestamp": "2025-10-15T13:41:35.259Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Technology Stack\n\n## Project Type\nMulti-language monorepo containing two standalone CLI tools:\n- **Text Extractor**: High-performance command-line tool for extracting text from PDF and EPUB files (Rust)\n- **Z-Library Downloader**: Interactive TUI and CLI tool for searching and downloading books (Python)\n\nBoth tools are designed for local execution with file system integration and can be used independently or in a pipeline workflow.\n\n## Core Technologies\n\n### Primary Language(s)\n\n**Rust (Text Extractor)**\n- **Version**: Rust 2021 Edition\n- **Compiler**: rustc via cargo\n- **Package Manager**: Cargo\n- **Workspace**: Cargo workspaces for multi-crate management\n\n**Python (Z-Library Downloader)**\n- **Version**: Python 3.8+\n- **Runtime**: CPython\n- **Package Manager**: pip\n- **Build System**: setuptools with pyproject.toml (PEP 517/518)\n\n### Key Dependencies/Libraries\n\n**Rust Dependencies:**\n- **clap 4.5**: Command-line argument parsing with derive macros\n- **anyhow 1.0**: Ergonomic error handling with context propagation\n- **walkdir 2.5**: Recursive directory traversal for batch processing\n- **pdf-extract 0.7**: PDF text extraction with encoding support\n- **epub 2.1**: EPUB parsing and content extraction\n\n**Python Dependencies:**\n- **requests ≥2.31.0**: HTTP client for Z-Library API interactions\n- **python-dotenv ≥1.0.0**: Environment variable management for credentials\n- **rich ≥13.7.0**: Terminal UI framework for interactive TUI mode\n\n**Development Dependencies:**\n- **Python Dev Tools**: pytest, black, flake8, mypy\n- **Rust Dev Tools**: cargo-clippy, rustfmt, cargo-test\n\n### Application Architecture\n\n**Architecture Pattern**: Standalone CLI with modular function decomposition\n\n**Text Extractor (Rust):**\n- **Entry Point**: `main.rs` with clap-based argument parsing\n- **Processing Model**: Synchronous, iterative file processing\n- **Error Handling**: Result-based error propagation with anyhow contexts\n- **File Operations**: Recursive directory walking with format detection\n\n**Z-Library Downloader (Python):**\n- **Module Structure**:\n  - `client.py`: Z-Library API wrapper (adapted from bipinkrish/Zlibrary-API)\n  - `tui.py`: Rich-based interactive interface\n  - `cli.py`: Command-line entry point and mode orchestration\n- **Operation Modes**:\n  - TUI mode (interactive with rich UI)\n  - CLI mode (direct search and download)\n  - Classic interactive mode (fallback)\n\n### Data Storage\n\n**Text Extractor:**\n- **Input**: PDF/EPUB files from specified directories\n- **Output**: Plain text files (.txt) with UTF-8 encoding\n- **Storage**: File system (user-specified output directory)\n- **No persistent state**: Stateless processing\n\n**Z-Library Downloader:**\n- **Downloads**: Books saved to `downloads/` directory (configurable)\n- **Credentials**: Stored in `.env` file (never committed)\n- **Session Management**: Cookie-based authentication with Z-Library API\n- **Data Formats**: JSON responses from API, binary book files\n\n### External Integrations\n\n**Z-Library API:**\n- **Protocol**: HTTPS/REST\n- **Domain**: 1lib.sk (configurable)\n- **Authentication Methods**:\n  - Email/password login\n  - Remix token (userid + userkey)\n- **API Endpoints**:\n  - `/eapi/user/login`: User authentication\n  - `/eapi/book/search`: Book search with filters\n  - `/eapi/book/{id}/{hash}/file`: Book download\n  - `/eapi/user/profile`: User profile and quota information\n- **Rate Limiting**: Subject to Z-Library's daily download quotas\n\n**No External Dependencies for Text Extractor:**\n- Operates entirely offline on local files\n\n### Monitoring & Dashboard Technologies\n\n**Z-Library Downloader (TUI Mode):**\n- **Dashboard Framework**: Rich library (terminal-based)\n- **Components**:\n  - Interactive prompts with validation\n  - Progress spinners for async operations\n  - Tables for search results display\n  - Panels for structured information\n- **State Management**: In-memory session state\n- **Real-time Updates**: Synchronous with progress indicators\n\n**Text Extractor:**\n- **Dashboard**: CLI with stdout/stderr logging\n- **Progress Reporting**: File-by-file processing status\n- **Summary Statistics**: Processed/error counts on completion\n\n## Development Environment\n\n### Build & Development Tools\n\n**Rust Workspace:**\n- **Build System**: Cargo with workspace configuration\n- **Workspace Root**: `packages/rust/Cargo.toml`\n- **Build Commands**:\n  - `cargo build --release`: Production builds\n  - `cargo run -- <args>`: Development runs\n  - `cargo test`: Run test suite\n- **Target Directory**: `target/` (debug and release profiles)\n\n**Python Package:**\n- **Build Backend**: setuptools\n- **Setup Scripts**: `scripts/setup.sh` for virtual environment\n- **Run Scripts**: `scripts/run.sh` for CLI execution\n- **Virtual Environment**: `venv/` directory (gitignored)\n- **Editable Install**: `pip install -e .` for development\n\n### Code Quality Tools\n\n**Rust Quality Assurance:**\n- **Linting**: `cargo clippy` with strict lints\n- **Formatting**: `rustfmt` with default configuration\n- **Type Checking**: Compile-time via rustc (static typing)\n- **Complexity Analysis**: `cargo-complexity` for cyclomatic complexity\n- **Testing**: `cargo test` with integration tests\n\n**Python Quality Assurance:**\n- **Type Checking**: `mypy` with strict mode enabled\n- **Linting**: `flake8` with line length and complexity rules\n- **Formatting**: `black` (line-length: 100, target: py38)\n- **Complexity Analysis**: `radon` for cyclomatic complexity measurement\n- **Testing**: `pytest` for unit and integration tests\n\n**Pre-commit Framework:**\n- **Tool**: `pre-commit` git hooks\n- **Checks**:\n  - Type checking (cargo check, mypy)\n  - Linting (clippy, flake8)\n  - Formatting verification (rustfmt, black)\n  - Cyclomatic complexity validation (≤10 per function)\n  - Line count validation (≤400 per file, ≤30 per function)\n- **Configuration**: `.pre-commit-config.yaml`\n\n**Code Metrics Enforcement:**\n- **File Size**: Maximum 400 lines per file\n- **Function Size**: Maximum 30 lines per function\n- **Cyclomatic Complexity**: Maximum 10 per function\n- **Automated Validation**: Pre-commit hooks block violations\n\n### Version Control & Collaboration\n\n- **VCS**: Git\n- **Branching Strategy**: GitHub Flow (feature branches → main)\n- **Main Branch**: `main`\n- **Commit Standards**: Conventional Commits (conventional prefixes)\n- **Code Review Process**: Pull requests required for main branch\n- **Protected Branches**: main branch requires reviews\n\n### Dashboard Development\n\n**Python TUI (Rich):**\n- **Live Development**: Run via `./scripts/run.sh --tui`\n- **Hot Reload**: Not applicable (terminal application)\n- **Testing**: Manual testing in terminal environment\n- **Debugging**: Rich console debugging features\n\n**Rust CLI:**\n- **Development Runs**: `cargo run -- --target <path> --output <path>`\n- **Watch Mode**: `cargo watch` (optional dependency)\n- **Fast Compilation**: Incremental compilation with sccache (optional)\n\n## Deployment & Distribution\n\n### Target Platform(s)\n- **Operating Systems**: Linux, macOS, Windows\n- **Architecture**: x86_64, aarch64 (Rust), any (Python)\n- **Environment**: Local user machines (development, research, personal use)\n\n### Distribution Method\n\n**Rust Binary:**\n- **Compilation**: Source distribution via Git\n- **Installation**: Users compile with `cargo build --release`\n- **Binary Location**: `target/release/text-extractor`\n- **Future**: Potential binary releases via GitHub Releases\n\n**Python Package:**\n- **Installation Method**: Editable install (`pip install -e .`)\n- **Script Entry Point**: `zlibrary-downloader` command (via pyproject.toml scripts)\n- **Future**: PyPI distribution for `pip install zlibrary-downloader`\n\n### Installation Requirements\n\n**Rust Tool:**\n- Rust toolchain (rustup) ≥1.70\n- C compiler for some dependencies (pdf-extract)\n- ~200MB disk space for dependencies\n\n**Python Tool:**\n- Python ≥3.8\n- pip for package installation\n- Virtual environment (recommended)\n- ~50MB disk space for dependencies\n\n**Shared:**\n- Git for cloning repository\n- ~500MB disk space for downloads and output\n\n### Update Mechanism\n- **Manual**: Users pull latest changes from Git and rebuild/reinstall\n- **Future**: Version checking and update notifications\n\n## Technical Requirements & Constraints\n\n### Performance Requirements\n\n**Text Extractor (Rust):**\n- **Processing Speed**: <1 second per average-sized book (200-300 pages)\n- **Memory Usage**: <100MB per process\n- **Concurrency**: Single-threaded (planned: parallel processing)\n- **Startup Time**: <100ms cold start\n\n**Z-Library Downloader (Python):**\n- **Search Response**: <3 seconds per search query\n- **Download Speed**: Limited by network bandwidth and Z-Library servers\n- **Memory Usage**: <150MB per process\n- **TUI Responsiveness**: <100ms for user interactions\n\n### Compatibility Requirements\n\n**Platform Support:**\n- **Linux**: Ubuntu 20.04+, Debian 11+, Fedora 35+, Arch\n- **macOS**: macOS 11+ (Big Sur and later)\n- **Windows**: Windows 10/11 (via WSL or native)\n\n**Rust Compatibility:**\n- **Minimum Rust**: 1.70.0\n- **Edition**: 2021\n- **Standard Library**: std (not no_std)\n\n**Python Compatibility:**\n- **Python Versions**: 3.8, 3.9, 3.10, 3.11, 3.12\n- **Interpreter**: CPython (PyPy untested)\n\n**Standards Compliance:**\n- **PDF**: PDF 1.0-1.7 specifications\n- **EPUB**: EPUB 2.0 and 3.0 standards\n- **Text Encoding**: UTF-8 output\n\n### Security & Compliance\n\n**Credential Management:**\n- **Storage**: `.env` file (not committed to version control)\n- **Access Control**: File system permissions (user-only readable)\n- **Transmission**: HTTPS for Z-Library API (TLS 1.2+)\n- **No Logging**: Credentials never logged or printed\n\n**Data Protection:**\n- **User Data**: All processing local (no external data transmission except Z-Library)\n- **Privacy**: No telemetry, analytics, or tracking\n- **Book Files**: Stored locally, user responsible for legal compliance\n\n**Threat Model:**\n- **Credential Exposure**: Mitigated by .gitignore and environment variables\n- **Man-in-the-Middle**: Mitigated by HTTPS enforcement\n- **Malicious PDFs**: PDF parsing could be exploited (dependency risk)\n\n**Compliance:**\n- **Copyright**: Tool provided as-is, users responsible for legal use\n- **Z-Library ToS**: Users must comply with Z-Library terms of service\n\n### Scalability & Reliability\n\n**Text Extractor:**\n- **Expected Load**: 1-1000 files per batch\n- **Concurrency**: Current: sequential, Future: rayon for parallel processing\n- **Failure Handling**: Continue on error, report at end\n- **Memory Scaling**: Linear with file size (processes one at a time)\n\n**Z-Library Downloader:**\n- **Expected Load**: 1-100 searches per session, 1-10 downloads per day\n- **Rate Limiting**: Respects Z-Library daily quotas\n- **Failure Handling**: Graceful error messages, no crash\n- **Session Management**: Cookie-based session persistence\n\n## Technical Decisions & Rationale\n\n### Decision Log\n\n1. **Rust for Text Extraction**:\n   - **Rationale**: Performance, memory safety, strong type system, zero-cost abstractions\n   - **Alternatives Considered**: Python (too slow), C++ (memory safety concerns)\n   - **Trade-offs**: Steeper learning curve, longer compile times\n\n2. **Python for Z-Library Integration**:\n   - **Rationale**: Rich ecosystem for HTTP/API clients, existing Z-Library API wrapper, excellent TUI libraries\n   - **Alternatives Considered**: Rust (less mature HTTP/TUI ecosystem in 2023)\n   - **Trade-offs**: Slower performance (acceptable for I/O-bound API calls)\n\n3. **Monorepo Structure**:\n   - **Rationale**: Related tools, shared documentation, unified workflow, easy pipeline integration\n   - **Alternatives Considered**: Separate repositories (harder to coordinate)\n   - **Trade-offs**: Larger repo size, mixed language environments\n\n4. **Cargo Workspaces (Rust)**:\n   - **Rationale**: Shared dependencies, unified build, easy to add more Rust tools\n   - **Alternatives Considered**: Single crate (less scalable)\n   - **Trade-offs**: More complex Cargo.toml structure\n\n5. **Rich Library for TUI**:\n   - **Rationale**: Beautiful terminal UI, excellent documentation, active maintenance\n   - **Alternatives Considered**: curses/urwid (steeper learning curve), textual (heavier)\n   - **Trade-offs**: Dependency size (~13MB), terminal compatibility\n\n6. **Environment Variables for Credentials**:\n   - **Rationale**: Security best practice, prevents accidental commits, portable\n   - **Alternatives Considered**: Config files (risk of commit), command-line args (visible in process list)\n   - **Trade-offs**: Requires .env file setup\n\n7. **Synchronous Processing**:\n   - **Rationale**: Simpler implementation, sufficient for current use case\n   - **Future Enhancement**: Async for parallel file processing\n   - **Trade-offs**: Slower for large batches (acceptable for now)\n\n8. **Pre-commit Quality Enforcement**:\n   - **Rationale**: Enforce quality standards automatically, prevent bad commits\n   - **Alternatives Considered**: CI-only checks (catches issues too late)\n   - **Trade-offs**: Slower commit process, requires setup\n\n## Known Limitations\n\n1. **Sequential Processing (Text Extractor)**:\n   - **Impact**: Slower for large batches of files\n   - **Future Solution**: Implement parallel processing with rayon\n   - **Timeline**: v0.2.0\n\n2. **No OCR Support**:\n   - **Impact**: Cannot extract text from image-based PDFs\n   - **Future Solution**: Integrate tesseract OCR\n   - **Timeline**: v0.3.0\n\n3. **Limited Format Support**:\n   - **Impact**: Only PDF and EPUB supported\n   - **Future Solution**: Add MOBI, AZW3, DOCX support\n   - **Timeline**: v0.2.0-v0.3.0\n\n4. **No Progress Bar for Large Files**:\n   - **Impact**: Users don't see progress during extraction of large files\n   - **Future Solution**: Add indicatif progress bars\n   - **Timeline**: v0.2.0\n\n5. **Z-Library API Dependency**:\n   - **Impact**: Tool breaks if Z-Library API changes\n   - **Mitigation**: Monitor API changes, update wrapper\n   - **Risk**: Medium (API relatively stable)\n\n6. **No GUI**:\n   - **Impact**: Terminal-only interface may be barrier for some users\n   - **Future Solution**: Optional web-based GUI for monitoring\n   - **Timeline**: v1.0.0+\n\n7. **HTML Tag Stripping is Basic**:\n   - **Impact**: EPUB extraction may have formatting artifacts\n   - **Future Solution**: Use proper HTML parser (html5ever)\n   - **Timeline**: v0.2.0\n\n8. **No Configuration Files**:\n   - **Impact**: Must specify arguments every time\n   - **Future Solution**: Support .toml/.yaml config files\n   - **Timeline**: v0.3.0\n\n9. **Type Hints Incomplete (Python)**:\n   - **Impact**: mypy cannot verify all code paths\n   - **Action Required**: Add type hints throughout codebase\n   - **Timeline**: v0.2.0 (required for QA compliance)\n\n10. **Cyclomatic Complexity Violations**:\n    - **Impact**: Some functions may exceed complexity limit of 10\n    - **Action Required**: Refactor complex functions\n    - **Audit**: Perform complexity audit on all existing code\n    - **Timeline**: v0.2.0 (required for QA compliance)\n",
  "fileStats": {
    "size": 14973,
    "lines": 397,
    "lastModified": "2025-10-15T13:41:24.653Z"
  },
  "comments": []
}